// Generated by CoffeeScript 1.10.0
(function() {
  var Table, _cmpNum, _mod, _weekdays, _weekdaysInv;

  _weekdays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];

  _weekdaysInv = {
    'Пн': 0,
    'Вт': 1,
    'Ср': 2,
    'Чт': 3,
    'Пт': 4,
    'Сб': 5,
    'Вс': 6
  };

  _cmpNum = function(a, b) {
    if (a > b) {
      return 1;
    } else if (a < b) {
      return -1;
    } else {
      return 0;
    }
  };

  _mod = function(a, b) {
    var c;
    c = a % b;
    if (c < 0) {
      return b + c;
    } else {
      return c;
    }
  };

  Table = (function() {
    function Table(parent, from1, to1, parts1) {
      this.parent = parent;
      this.from = from1;
      this.to = to1;
      this.parts = parts1;
      this.table = tag('table');
      this.parent.append(this.table);
      this.rows = [];
    }

    Table.prototype.addHead = function() {
      var hour, j, ref, ref1, th, thead, tr;
      tr = tag('tr');
      tr.append(tag('th', '', 'Фамилия', {
        "data-field": 'name'
      }));
      tr.append(tag('th', '', 'Upd.', {
        'data-field': 'updated'
      }));
      tr.append(tag('th', '', 'ДН', {
        'data-field': 'date'
      }));
      for (hour = j = ref = this.from, ref1 = this.to - 1; ref <= ref1 ? j <= ref1 : j >= ref1; hour = ref <= ref1 ? ++j : --j) {
        th = tag('th', '', hour, {
          'data-field': "hour_" + hour,
          "colspan": this.parts
        });
        tr.append(th);
      }
      thead = tag('thead', '', tr);
      return this.table.append(thead);
    };

    Table.prototype.makeSortable = function(func) {
      var $th, _handlerGenerator, cells, j, ref, th, thi;
      _handlerGenerator = (function(_this) {
        return function($th, thi) {
          return $th.click(function() {
            return func(thi);
          });
        };
      })(this);
      cells = this.table.find('thead').children().children();
      for (thi = j = 0, ref = this.to - this.from + 2; 0 <= ref ? j <= ref : j >= ref; thi = 0 <= ref ? ++j : --j) {
        th = cells[thi];
        $th = $(th);
        _handlerGenerator($th, thi);
      }
      return null;
    };

    Table.prototype.sortBy = function(thi) {
      var hour;
      if (thi === 'now') {
        hour = (new Date()).getHours();
        if (hour > this.to) {
          hour = this.to;
        }
        if (hour < this.from) {
          hour = this.from;
        }
        this.sortBy(hour - this.from + 3);
      } else if ((0 <= thi && thi < 3)) {
        this.textSort(thi);
      } else {
        this.schedSort(thi);
      }
      return null;
    };

    Table.prototype.textSort = function(thi) {
      var j, len, tb, tr, trs;
      tb = this.table.find('tbody');
      trs = tb.children().slice(0);
      trs = trs.sort(function(a, b) {
        var $cells1, $cells2, c1, c2, cmpResult, i, j, len, order;
        order = [thi, 2, 0, 1];
        $cells1 = $(($(a)).children());
        $cells2 = $(($(b)).children());
        for (j = 0, len = order.length; j < len; j++) {
          i = order[j];
          c1 = (($($cells1[i])).attr('data')).trim();
          c2 = (($($cells2[i])).attr('data')).trim();
          if (isNaN(c1)) {
            cmpResult = c1.localeCompare(c2);
          } else {
            cmpResult = _cmpNum(c1 * 1, c2 * 1);
          }
          if (cmpResult !== 0) {
            return cmpResult;
          }
        }
        return 0;
      });
      for (j = 0, len = trs.length; j < len; j++) {
        tr = trs[j];
        tb.append(tr);
      }
      return null;
    };

    Table.prototype.schedSort = function(thi) {
      var _cells_test, from, j, len, parts, ref, sortFunc, tb, to, tr, trs;
      tb = this.table.find('tbody');
      trs = tb.children().slice(0);
      ref = [this.to, this.from, this.parts], to = ref[0], from = ref[1], parts = ref[2];
      _cells_test = function(cells, from, to) {
        var c1, i, il1, j, ref1, ref2, s1;
        s1 = -1;
        il1 = 0;
        for (i = j = ref1 = from, ref2 = to; ref1 <= ref2 ? j <= ref2 : j >= ref2; i = ref1 <= ref2 ? ++j : --j) {
          c1 = ($(cells[i])).hasClass('selected');
          if (s1 === -1 && !c1) {
            continue;
          }
          if (s1 === -1 && c1) {
            s1 = i;
            il1 += 1;
            continue;
          }
          if (s1 > 0 && c1) {
            il1 += 1;
            continue;
          }
          if (s1 > 0 && !c1) {
            break;
          }
        }
        return [s1, il1];
      };
      sortFunc = function(a, b) {
        var $cells1, $cells2, cmpResult, il1, il2, ref1, ref2, s1, s2, wd1, wd2;
        $cells1 = $(($(a)).children());
        $cells2 = $(($(b)).children());
        wd1 = (($($cells1[2])).attr('data')).trim() * 1;
        wd2 = (($($cells2[2])).attr('data')).trim() * 1;
        ref1 = _cells_test($cells1, (wd1 ? 3 : (thi - 3) * parts + 3), (to - from) * parts + 2), s1 = ref1[0], il1 = ref1[1];
        ref2 = _cells_test($cells2, (wd2 ? 3 : (thi - 3) * parts + 3), (to - from) * parts + 2), s2 = ref2[0], il2 = ref2[1];
        if ((s1 === s2 && s2 === -1)) {
          return 0;
        }
        if (s1 === -1) {
          return 1;
        }
        if (s2 === -1) {
          return -1;
        }
        cmpResult = _cmpNum(wd1, wd2);
        if (cmpResult !== 0) {
          return cmpResult;
        }
        cmpResult = _cmpNum(s1, s2);
        if (cmpResult !== 0) {
          return cmpResult;
        }
        return _cmpNum(il2, il1);
      };
      trs = trs.sort(sortFunc);
      for (j = 0, len = trs.length; j < len; j++) {
        tr = trs[j];
        tb.append(tr);
      }
      return null;
    };

    Table.prototype.selectTd = function(td, color) {
      td.css('background-color', color);
      return td.addClass('selected');
    };

    Table.prototype.unselectTd = function(td) {
      td.css('background-color', 'transparent');
      return td.removeClass('selected');
    };

    Table.prototype._getLine = function(title, update_time, wd, times, color, curWeekDay, clickHandler) {
      var cells, ddiff, hour, houri, lefthead, part, parti, td, tr;
      tr = tag('tr');
      cells = [];
      lefthead = needAuthGroup('moderator') ? a('', title, clickHandler) : title;
      cells.push(tag('td', '', lefthead, {
        'data': title
      }));
      ddiff = Date.now() - update_time;
      cells.push(tag('td', '', dateDiff(ddiff), {
        'data': ddiff
      }));
      cells.push(tag('td', '', _weekdays[wd], {
        'data': _mod(wd - curWeekDay + 1, 7)
      }));
      for (houri in times) {
        hour = times[houri];
        for (parti in hour) {
          part = hour[parti];
          td = tag('td', 'hour', '');
          td.attr('id', wd + "." + houri + "." + parti);
          if (part) {
            this.selectTd(td, color);
          }
          cells.push(td);
        }
      }
      return tr.append(cells);
    };

    Table.prototype.analyze = function(persons) {
      var j, len, person, results;
      results = [];
      for (j = 0, len = persons.length; j < len; j++) {
        person = persons[j];
        results.push(this.analyzePerson(person));
      }
      return results;
    };

    Table.prototype.analyzePerson = function(person) {
      var clickHandler, color, curWeekDay, day, firstSymTitle, hour, hours, index, j, k, l, len, name, num, part, ref, ref1, ref2, ref3, rows, time, wd, weekdays;
      firstSymTitle = person.title ? person.title.name[0] : '';
      name = person.name + " (" + firstSymTitle + ")";
      color = person.state.color || 'blue';
      clickHandler = function() {
        return goto(person.name, {
          obj: 'person',
          act: 'show',
          'id': person.id
        });
      };
      weekdays = {};
      for (wd = j = 0; j <= 6; wd = ++j) {
        hours = weekdays[wd] = {};
        for (hour = k = ref = this.from, ref1 = this.to - 1; ref <= ref1 ? k <= ref1 : k >= ref1; hour = ref <= ref1 ? ++k : --k) {
          hours[hour] = (function() {
            var l, ref2, results;
            results = [];
            for (num = l = 0, ref2 = this.parts - 1; 0 <= ref2 ? l <= ref2 : l >= ref2; num = 0 <= ref2 ? ++l : --l) {
              results.push(false);
            }
            return results;
          }).call(this);
        }
      }
      ref2 = person.times.split(' ');
      for (l = 0, len = ref2.length; l < len; l++) {
        time = ref2[l];
        ref3 = time.split('.'), wd = ref3[0], hour = ref3[1], part = ref3[2];
        if (time && (this.to > hour && hour >= this.from)) {
          weekdays[wd][hour][part] = true;
        }
      }
      curWeekDay = (new Date()).getDay();
      rows = (function() {
        var results;
        results = [];
        for (index in weekdays) {
          day = weekdays[index];
          results.push(this._getLine(name, person.update_time, index, day, color, curWeekDay, clickHandler));
        }
        return results;
      }).call(this);
      return this.table.append(rows);
    };

    return Table;

  })();

  window.Table = Table;

}).call(this);

//# sourceMappingURL=table.js.map
